{
  "service": "template",
  "table": "public_templates",
  "description": "Additional templates extracted from hardcoded implementations - project templates",
  "dependencies": ["template.public_template_categories"],
  "data": [
    {
      "id": "98901234-89ab-4def-8123-456789abcdef",
      "category_id": null,
      "name": "Go Microservice Project",
      "display_name": "Go Microservice Project Template",
      "description": "Template for creating complete Go microservice project structure with clean architecture",
      "slug": "go-microservice-project",
      "template_category": "microservices",
      "template_type": "boilerplate",
      "content": "# {{.ProjectName}}\n\n{{.Description}}\n\n## Getting Started\n\n```bash\n# Install dependencies\ngo mod tidy\n\n# Run the server\ngo run cmd/server/main.go\n```\n\n## API Endpoints\n\n- `GET /health` - Health check endpoint\n\n## Project Structure\n\n```\n{{.ProjectName}}/\n├── cmd/\n│   └── server/\n│       └── main.go\n├── internal/\n│   ├── application/\n│   ├── domain/\n│   ├── infrastructure/\n│   └── interfaces/\n│       └── http/\n├── pkg/\n├── docs/\n├── docker/\n├── scripts/\n├── go.mod\n├── go.sum\n├── README.md\n├── Dockerfile\n└── Makefile\n```",
      "content_type": "plaintext",
      "language": "go",
      "framework": "gin",
      "version": "1.0.0",
      "major_version": 1,
      "minor_version": 0,
      "patch_version": 0,
      "is_latest_version": true,
      "is_active": true,
      "is_published": true,
      "is_draft": false,
      "is_featured": true,
      "complexity_level": "advanced",
      "estimated_time_minutes": 60,
      "usage_count": 0,
      "download_count": 0,
      "like_count": 0,
      "is_validated": true,
      "file_extension": ".md",
      "output_path": "README.md",
      "variables": {
        "ProjectName": {
          "type": "string",
          "description": "Name of the microservice project",
          "required": true,
          "example": "user-service"
        },
        "ModuleName": {
          "type": "string",
          "description": "Go module name",
          "required": true,
          "example": "github.com/myorg/user-service"
        },
        "Description": {
          "type": "string",
          "description": "Description of the microservice",
          "required": true,
          "example": "A user management microservice with clean architecture"
        }
      },
      "configuration": {
        "supports_clean_architecture": true,
        "supports_docker": true,
        "supports_makefile": true,
        "supports_health_check": true
      },
      "dependencies": ["github.com/gin-gonic/gin"],
      "tags": ["go", "microservice", "project", "clean-architecture", "gin"],
      "license": "MIT",
      "author_name": "Go Factory Platform",
      "keywords": "go microservice project clean architecture gin docker",
      "created_at": "2024-01-01T14:30:00Z",
      "updated_at": "2024-01-01T14:30:00Z",
      "published_at": "2024-01-01T14:30:00Z"
    },
    {
      "id": "99012345-89ab-4def-8123-456789abcdef",
      "category_id": null,
      "name": "Go CLI Project",
      "display_name": "Go CLI Project Template",
      "description": "Template for creating Go CLI applications using Cobra framework",
      "slug": "go-cli-project",
      "template_category": "boilerplate",
      "template_type": "boilerplate",
      "content": "# {{.ProjectName}}\n\n{{.Description}}\n\n## Installation\n\n```bash\n# Install dependencies\ngo mod tidy\n\n# Build the CLI\ngo build -o bin/{{.ProjectName}} cmd/main.go\n\n# Or install globally\ngo install\n```\n\n## Usage\n\n```bash\n# Run from source\ngo run cmd/main.go --help\n\n# Or run the built binary\n./bin/{{.ProjectName}} --help\n```\n\n## Project Structure\n\n```\n{{.ProjectName}}/\n├── cmd/\n│   └── main.go\n├── internal/\n│   └── commands/\n│       └── root.go\n├── pkg/\n├── docs/\n├── go.mod\n├── go.sum\n├── README.md\n└── Makefile\n```",
      "content_type": "plaintext",
      "language": "go",
      "framework": "cobra",
      "version": "1.0.0",
      "major_version": 1,
      "minor_version": 0,
      "patch_version": 0,
      "is_latest_version": true,
      "is_active": true,
      "is_published": true,
      "is_draft": false,
      "is_featured": true,
      "complexity_level": "intermediate",
      "estimated_time_minutes": 30,
      "usage_count": 0,
      "download_count": 0,
      "like_count": 0,
      "is_validated": true,
      "file_extension": ".md",
      "output_path": "README.md",
      "variables": {
        "ProjectName": {
          "type": "string",
          "description": "Name of the CLI project",
          "required": true,
          "example": "myapp"
        },
        "ModuleName": {
          "type": "string",
          "description": "Go module name",
          "required": true,
          "example": "github.com/myorg/myapp"
        },
        "Description": {
          "type": "string",
          "description": "Description of the CLI application",
          "required": true,
          "example": "A powerful command-line tool for managing resources"
        }
      },
      "configuration": {
        "supports_cobra": true,
        "supports_viper": true,
        "supports_makefile": true,
        "supports_subcommands": true
      },
      "dependencies": ["github.com/spf13/cobra", "github.com/spf13/viper"],
      "tags": ["go", "cli", "project", "cobra", "command-line"],
      "license": "MIT",
      "author_name": "Go Factory Platform",
      "keywords": "go cli project cobra command line tool viper",
      "created_at": "2024-01-01T15:00:00Z",
      "updated_at": "2024-01-01T15:00:00Z",
      "published_at": "2024-01-01T15:00:00Z"
    },
    {
      "id": "90123456-89ab-4def-8123-456789abcdef",
      "category_id": null,
      "name": "Go Library Project",
      "display_name": "Go Library Project Template",
      "description": "Template for creating reusable Go library packages with proper structure",
      "slug": "go-library-project",
      "template_category": "boilerplate",
      "template_type": "boilerplate",
      "content": "# {{.ProjectName}}\n\n{{.Description}}\n\n## Installation\n\n```bash\ngo get {{.ModuleName}}\n```\n\n## Usage\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"{{.ModuleName}}\"\n)\n\nfunc main() {\n\t// Basic usage\n\tfmt.Println({{.PackageName}}.Hello(\"World\"))\n\t\n\t// With configuration\n\tconfig := {{.PackageName}}.NewConfig()\n\tconfig.Debug = true\n\t\n\tclient := {{.PackageName}}.NewClient(config)\n\tfmt.Printf(\"Version: %s\\n\", {{.PackageName}}.Version())\n}\n```\n\n## Development\n\n```bash\n# Run tests\ngo test ./...\n\n# Run tests with coverage\ngo test -cover ./...\n\n# Build\ngo build\n```\n\n## API Reference\n\n### Functions\n\n- `Version() string` - Returns the library version\n- `Hello(name string) string` - Returns a greeting message\n- `NewConfig() *Config` - Creates default configuration\n- `NewClient(config *Config) *Client` - Creates a new client\n\n### Types\n\n- `Config` - Library configuration\n- `Client` - Main library client",
      "content_type": "plaintext",
      "language": "go",
      "framework": "standard",
      "version": "1.0.0",
      "major_version": 1,
      "minor_version": 0,
      "patch_version": 0,
      "is_latest_version": true,
      "is_active": true,
      "is_published": true,
      "is_draft": false,
      "is_featured": true,
      "complexity_level": "intermediate",
      "estimated_time_minutes": 25,
      "usage_count": 0,
      "download_count": 0,
      "like_count": 0,
      "is_validated": true,
      "file_extension": ".md",
      "output_path": "README.md",
      "variables": {
        "ProjectName": {
          "type": "string",
          "description": "Name of the library project",
          "required": true,
          "example": "mylib"
        },
        "PackageName": {
          "type": "string",
          "description": "Go package name",
          "required": true,
          "example": "mylib"
        },
        "ModuleName": {
          "type": "string",
          "description": "Go module name",
          "required": true,
          "example": "github.com/myorg/mylib"
        },
        "Description": {
          "type": "string",
          "description": "Description of the library",
          "required": true,
          "example": "A powerful Go library for handling common tasks"
        }
      },
      "configuration": {
        "supports_testing": true,
        "supports_coverage": true,
        "supports_documentation": true,
        "supports_examples": true
      },
      "dependencies": ["github.com/stretchr/testify"],
      "tags": ["go", "library", "project", "package", "reusable"],
      "license": "MIT",
      "author_name": "Go Factory Platform",
      "keywords": "go library project package reusable module",
      "created_at": "2024-01-01T15:30:00Z",
      "updated_at": "2024-01-01T15:30:00Z",
      "published_at": "2024-01-01T15:30:00Z"
    },
    {
      "id": "01234567-89ab-4def-8123-456789abcdef",
      "category_id": null,
      "name": "Go API Project",
      "display_name": "Go API Project Template",
      "description": "Template for creating REST API services with OpenAPI specification and Swagger documentation",
      "slug": "go-api-project",
      "template_category": "microservices",
      "template_type": "boilerplate",
      "content": "# {{.ProjectName}}\n\n{{.Description}}\n\n## Getting Started\n\n```bash\n# Install dependencies\ngo mod tidy\n\n# Generate Swagger documentation\nswag init -g cmd/server/main.go\n\n# Run the API server\ngo run cmd/server/main.go\n```\n\n## API Documentation\n\nSwagger UI available at: http://localhost:8080/swagger/index.html\n\n## API Endpoints\n\n- `GET /health` - Health check endpoint\n- `GET /api/v1/ping` - Ping endpoint\n- `GET /swagger/*` - Swagger documentation\n\n## Project Structure\n\n```\n{{.ProjectName}}/\n├── cmd/\n│   └── server/\n│       └── main.go\n├── internal/\n│   ├── api/\n│   ├── handlers/\n│   └── middleware/\n├── docs/\n├── docker/\n├── go.mod\n├── go.sum\n├── README.md\n├── Dockerfile\n└── Makefile\n```",
      "content_type": "plaintext",
      "language": "go",
      "framework": "gin",
      "version": "1.0.0",
      "major_version": 1,
      "minor_version": 0,
      "patch_version": 0,
      "is_latest_version": true,
      "is_active": true,
      "is_published": true,
      "is_draft": false,
      "is_featured": true,
      "complexity_level": "intermediate",
      "estimated_time_minutes": 45,
      "usage_count": 0,
      "download_count": 0,
      "like_count": 0,
      "is_validated": true,
      "file_extension": ".md",
      "output_path": "README.md",
      "variables": {
        "ProjectName": {
          "type": "string",
          "description": "Name of the API project",
          "required": true,
          "example": "user-api"
        },
        "ModuleName": {
          "type": "string",
          "description": "Go module name",
          "required": true,
          "example": "github.com/myorg/user-api"
        },
        "Description": {
          "type": "string",
          "description": "Description of the API service",
          "required": true,
          "example": "A RESTful API service for user management with Swagger documentation"
        }
      },
      "configuration": {
        "supports_swagger": true,
        "supports_openapi": true,
        "supports_gin": true,
        "supports_middleware": true
      },
      "dependencies": ["github.com/gin-gonic/gin", "github.com/swaggo/gin-swagger", "github.com/swaggo/files", "github.com/swaggo/swag"],
      "tags": ["go", "api", "rest", "swagger", "openapi", "gin"],
      "license": "MIT",
      "author_name": "Go Factory Platform",
      "keywords": "go api rest swagger openapi gin documentation",
      "created_at": "2024-01-01T16:00:00Z",
      "updated_at": "2024-01-01T16:00:00Z",
      "published_at": "2024-01-01T16:00:00Z"
    },
    {
      "id": "12345678-89ab-4def-8123-456789abcdef",
      "category_id": null,
      "name": "Go Worker Project",
      "display_name": "Go Worker Project Template",
      "description": "Template for creating background worker or job processor applications",
      "slug": "go-worker-project",
      "template_category": "microservices",
      "template_type": "boilerplate",
      "content": "# {{.ProjectName}}\n\n{{.Description}}\n\n## Getting Started\n\n```bash\ngo run cmd/worker/main.go\n```\n\n## Configuration\n\nEnvironment variables:\n\n- `WORKER_CONCURRENCY` - Number of concurrent workers (default: 1)\n- `QUEUE_NAME` - Name of the job queue (default: \"default\")\n- `REDIS_URL` - Redis connection URL for job storage\n\n## Project Structure\n\n```\n{{.ProjectName}}/\n├── cmd/\n│   └── worker/\n│       └── main.go\n├── internal/\n│   ├── worker/\n│   ├── jobs/\n│   └── queue/\n├── pkg/\n├── docker/\n├── go.mod\n├── go.sum\n├── README.md\n├── Dockerfile\n└── Makefile\n```",
      "content_type": "plaintext",
      "language": "go",
      "framework": "standard",
      "version": "1.0.0",
      "major_version": 1,
      "minor_version": 0,
      "patch_version": 0,
      "is_latest_version": true,
      "is_active": true,
      "is_published": true,
      "is_draft": false,
      "is_featured": false,
      "complexity_level": "intermediate",
      "estimated_time_minutes": 40,
      "usage_count": 0,
      "download_count": 0,
      "like_count": 0,
      "is_validated": true,
      "file_extension": ".md",
      "output_path": "README.md",
      "variables": {
        "ProjectName": {
          "type": "string",
          "description": "Name of the worker project",
          "required": true,
          "example": "email-worker"
        },
        "ModuleName": {
          "type": "string",
          "description": "Go module name",
          "required": true,
          "example": "github.com/myorg/email-worker"
        },
        "Description": {
          "type": "string",
          "description": "Description of the worker service",
          "required": true,
          "example": "A background worker for processing email jobs"
        }
      },
      "configuration": {
        "supports_concurrency": true,
        "supports_queues": true,
        "supports_redis": true,
        "supports_job_processing": true
      },
      "dependencies": [],
      "tags": ["go", "worker", "background", "jobs", "queue", "processing"],
      "license": "MIT",
      "author_name": "Go Factory Platform",
      "keywords": "go worker background jobs queue processing redis",
      "created_at": "2024-01-01T16:30:00Z",
      "updated_at": "2024-01-01T16:30:00Z",
      "published_at": "2024-01-01T16:30:00Z"
    }
  ]
}
